// Complete ESP32 WiFi AP + TCP Server Solution
// For Arduino Mega with guaranteed WiFi visibility
#define DEBUG Serial      // USB Serial Monitor
#define ESP32 Serial3     // Hardware Serial3 (Mega pins 14/15)
#define BAUD_RATE 115200
#define AP_SSID "teradrive"
#define AP_PASS "12345678"
#define TCP_PORT 1234

void setup() {
  DEBUG.begin(BAUD_RATE);
  ESP32.begin(BAUD_RATE);
  
  // Critical extended boot delay
  delay(5000);  // Increased to 5 seconds for slow-booting modules
  DEBUG.println("\n=== ESP32 WiFi AP + TCP Server ===");
  DEBUG.println("Guaranteed Visibility Edition");
  DEBUG.println("===============================");

  // 1. Factory reset with confirmation
  DEBUG.println("\n[1] Performing factory reset...");
  sendATCommand("AT+RESTORE", 6000);  // Extended timeout
  waitForResponse("ready", 3000);     // Wait for boot complete

  // 2. Set ATE1 for echo (debugging)
  sendATCommand("ATE1", 1000);

  // 3. Configure AP mode with verification
  DEBUG.println("\n[2] Configuring AP mode...");
  sendATCommand("AT+CWMODE=2", 2000);
  sendATCommand("AT+CWMODE?", 1000);

  // 4. Create Access Point with enhanced parameters
  DEBUG.println("\n[3] Creating Access Point...");
  String apCmd = "AT+CWSAP=\"" + String(AP_SSID) + "\",\"" + String(AP_PASS) + "\",6,4";
  sendATCommand(apCmd, 3000);
  sendATCommand("AT+CWSAP?", 1000);

  // 5. Force SSID visibility (critical fix)
  DEBUG.println("\n[4] Ensuring SSID visibility...");
  sendATCommand("AT+CWHOSTAPSSID=0", 1000);  // 0=visible
  sendATCommand("AT+CWHOSTAPSSID?", 1000);

  // 6. Configure IP settings
  DEBUG.println("\n[5] Setting IP configuration...");
  sendATCommand("AT+CIPAP=\"192.168.4.1\"", 1000);
  sendATCommand("AT+CIPAP?", 1000);

  // 7. Start TCP server
  DEBUG.println("\n[6] Starting TCP server...");
  sendATCommand("AT+CIPMUX=1", 1000);
  sendATCommand("AT+CIPSERVER=1," + String(TCP_PORT), 2000);

  // 8. Final verification
  DEBUG.println("\n[7] System Verification:");
  sendATCommand("AT+CIFSR", 2000);
  sendATCommand("AT+CWLAP", 5000);  // Self-scan to verify visibility

  DEBUG.println("\nSetup Complete!");
  DEBUG.println("Guaranteed WiFi Name: " + String(AP_SSID));
  DEBUG.println("Connect using: 192.168.4.1:" + String(TCP_PORT));
  DEBUG.println("Scan for networks on your phone/computer");
}

void loop() {
  // Serial passthrough for debugging
  if (DEBUG.available()) ESP32.write(DEBUG.read());
  if (ESP32.available()) DEBUG.write(ESP32.read());
}

// Enhanced AT command function with error checking
void sendATCommand(String cmd, unsigned long timeout) {
  DEBUG.print(">>> ");
  DEBUG.println(cmd);
  ESP32.println(cmd);

  unsigned long start = millis();
  String response;

  while (millis() - start < timeout) {
    while (ESP32.available()) {
      char c = ESP32.read();
      response += c;
      if (c == '\n') {
        DEBUG.print("<<< ");
        DEBUG.print(response);
        response = "";
      }
    }
  }
}

// New: Wait for specific response
bool waitForResponse(String target, unsigned long timeout) {
  unsigned long start = millis();
  String response;

  while (millis() - start < timeout) {
    while (ESP32.available()) {
      char c = ESP32.read();
      response += c;
      if (response.indexOf(target) >= 0) {
        DEBUG.print("<<< ");
        DEBUG.println(response);
        return true;
      }
    }
  }
  DEBUG.println("!!! Timeout waiting for: " + target);
  return false;
}
