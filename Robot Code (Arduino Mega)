#include <TinyGPS++.h>

TinyGPSPlus gps;
#define GPS_SERIAL Serial1
#define BT_SERIAL Serial3

// Motor pins
const int ENA = 12;  // Enable pin for Motor A (PWM speed control)
const int ENB = 13;  // Enable pin for Motor B (PWM speed control)
const int motorPin1 = 8;  // Motor A direction pin 1
const int motorPin2 = 9;  // Motor A direction pin 2
const int motorPin3 = 11; // Motor B direction pin 1
const int motorPin4 = 10; // Motor B direction pin 2

void setup() {
  Serial.begin(115200);  // For debugging
  GPS_SERIAL.begin(9600);  // GPS module baud rate
  BT_SERIAL.begin(9600);  // Bluetooth module baud rate
  
  // Set motor control pins as outputs
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(motorPin3, OUTPUT);
  pinMode(motorPin4, OUTPUT);
  
  // Initialize motors to stop
  stopMotors();
}

void loop() {
  // Read GPS data
  while (GPS_SERIAL.available() > 0) {
    if (gps.encode(GPS_SERIAL.read())) {
      if (gps.location.isValid()) {
        // Send GPS data to MATLAB
        BT_SERIAL.print(gps.location.lat(), 6);
        BT_SERIAL.print(",");
        BT_SERIAL.println(gps.location.lng(), 6);
      }
    }
  }
  
  // Check for incoming motor commands from MATLAB
  if (BT_SERIAL.available() > 0) {
    String command = BT_SERIAL.readStringUntil('\n');
    processMotorCommand(command);
  }
}

void processMotorCommand(String command) {
  // Expected format: "leftSpeed,rightSpeed"
  int commaIndex = command.indexOf(',');
  if (commaIndex != -1) {
    int leftSpeed = command.substring(0, commaIndex).toInt();
    int rightSpeed = command.substring(commaIndex + 1).toInt();
    
    // Set motor speeds and directions
    setMotorSpeed(leftSpeed, rightSpeed);
  }
}

void setMotorSpeed(int leftSpeed, int rightSpeed) {
  // Left motor control
  if (leftSpeed > 0) {
    digitalWrite(motorPin1, HIGH);
    digitalWrite(motorPin2, LOW);
  } else if (leftSpeed < 0) {
    digitalWrite(motorPin1, LOW);
    digitalWrite(motorPin2, HIGH);
    leftSpeed = -leftSpeed;  // Make speed positive
  } else {
    digitalWrite(motorPin1, LOW);
    digitalWrite(motorPin2, LOW);
  }
  
  // Right motor control
  if (rightSpeed > 0) {
    digitalWrite(motorPin3, HIGH);
    digitalWrite(motorPin4, LOW);
  } else if (rightSpeed < 0) {
    digitalWrite(motorPin3, LOW);
    digitalWrite(motorPin4, HIGH);
    rightSpeed = -rightSpeed;  // Make speed positive
  } else {
    digitalWrite(motorPin3, LOW);
    digitalWrite(motorPin4, LOW);
  }
  
  // Set PWM speeds (0-255)
  analogWrite(ENA, leftSpeed);
  analogWrite(ENB, rightSpeed);
}

void stopMotors() {
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  digitalWrite(motorPin3, LOW);
  digitalWrite(motorPin4, LOW);
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
}
