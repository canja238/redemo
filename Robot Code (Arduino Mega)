#include <TinyGPS++.h>

TinyGPSPlus gps;
#define GPS_SERIAL Serial1
#define ESP_SERIAL Serial3  // Changed from BT_SERIAL to ESP_SERIAL

// Motor pins
const int ENA = 12;  // Enable pin for Motor A (PWM speed control)
const int ENB = 13;  // Enable pin for Motor B (PWM speed control)
const int motorPin1 = 8;   // Motor A direction pin 1
const int motorPin2 = 9;   // Motor A direction pin 2
const int motorPin3 = 11;  // Motor B direction pin 1
const int motorPin4 = 10;  // Motor B direction pin 2

// Function prototypes
void controlMotors(int YL, int YR);
void stopMotors();

void setup() {
  // Initialize serial communications
  Serial.begin(115200);  // For debugging
  GPS_SERIAL.begin(115200);  // GPS module
  ESP_SERIAL.begin(115200);   // ESP-01 typically uses 115200 baud
  
  // Initialize motor control pins
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(motorPin3, OUTPUT);
  pinMode(motorPin4, OUTPUT);
  
  // Initially stop the motors
  stopMotors();
  
  Serial.println("System Initialized");
  
  // Optional: Send AT command to check ESP-01 connection
  ESP_SERIAL.println("AT");
  delay(1000);
  if (ESP_SERIAL.available()) {
    String response = ESP_SERIAL.readString();
    Serial.println("ESP-01 Response: " + response);
  }
}

void loop() {
  // Read GPS data
  while (GPS_SERIAL.available() > 0) {
    if (gps.encode(GPS_SERIAL.read())) {
      if (gps.location.isValid()) {
        // Send GPS coordinates to server via ESP-01
        String gpsData = String(gps.location.lat(), 6) + "," + String(gps.location.lng(), 6);
        ESP_SERIAL.println(gpsData);  // Send as plain text
        
        // For debugging
        Serial.print("Sent GPS Data: ");
        Serial.println(gpsData);
      }
    }
  }
  
  // Check for incoming motor commands from server via ESP-01
  if (ESP_SERIAL.available() > 0) {
    String command = ESP_SERIAL.readStringUntil('\n');
    command.trim();
    
    // Parse the command (format: "YL,YR")
    int commaIndex = command.indexOf(',');
    if (commaIndex > 0) {
      int YL = command.substring(0, commaIndex).toInt();
      int YR = command.substring(commaIndex + 1).toInt();
      
      // For debugging
      Serial.print("Received Command: ");
      Serial.print(YL);
      Serial.print(", ");
      Serial.println(YR);
      
      // Control motors based on the received command
      controlMotors(YL, YR);
    }
  }
}

void controlMotors(int YL, int YR) {
  // Control left motor (Motor A)
  if (YL > 0) {
    digitalWrite(motorPin1, HIGH);
    digitalWrite(motorPin2, LOW);
    analogWrite(ENA, YL);
  } else if (YL < 0) {
    digitalWrite(motorPin1, LOW);
    digitalWrite(motorPin2, HIGH);
    analogWrite(ENA, -YL);
  } else {
    digitalWrite(motorPin1, LOW);
    digitalWrite(motorPin2, LOW);
    analogWrite(ENA, 0);
  }
  
  // Control right motor (Motor B)
  if (YR > 0) {
    digitalWrite(motorPin3, HIGH);
    digitalWrite(motorPin4, LOW);
    analogWrite(ENB, YR);
  } else if (YR < 0) {
    digitalWrite(motorPin3, LOW);
    digitalWrite(motorPin4, HIGH);
    analogWrite(ENB, -YR);
  } else {
    digitalWrite(motorPin3, LOW);
    digitalWrite(motorPin4, LOW);
    analogWrite(ENB, 0);
  }
}

void stopMotors() {
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  digitalWrite(motorPin3, LOW);
  digitalWrite(motorPin4, LOW);
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
}
