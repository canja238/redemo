#include <TinyGPS++.h>

TinyGPSPlus gps;
#define GPS_SERIAL Serial1  // GPS on Serial1 (Mega pins 18/19)
#define ESP_SERIAL Serial3  // ESP32 connected to Mega's Serial3 (pins 14/15)

// Motor pins (Mega pins, unchanged)
const int ENA = 12;  // Enable pin for Motor A (PWM)
const int ENB = 13;  // Enable pin for Motor B (PWM)
const int motorPin1 = 8;   // Motor A direction pin 1
const int motorPin2 = 9;   // Motor A direction pin 2
const int motorPin3 = 11;  // Motor B direction pin 1
const int motorPin4 = 10;  // Motor B direction pin 2

void controlMotors(int WL, int WR);
void stopMotors();

void setup() {
  Serial.begin(115200);      // Debug serial
  GPS_SERIAL.begin(115200);  // GPS on Serial1
  ESP_SERIAL.begin(115200);  // ESP32 on Serial3 (115200 baud)

  // Initialize motor pins
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(motorPin3, OUTPUT);
  pinMode(motorPin4, OUTPUT);
  
  stopMotors();
  Serial.println("Mega + ESP32 Initialized");
}

void loop() {
  // Read GPS data and send to ESP32
  while (GPS_SERIAL.available() > 0) {
    if (gps.encode(GPS_SERIAL.read())) {
      if (gps.location.isValid()) {
        String gpsData = String(gps.location.lat(), 6) + "," + String(gps.location.lng(), 6);
        ESP_SERIAL.println(gpsData);  // Send to ESP32 via Serial3
        Serial.print("Sent GPS Data: ");
        Serial.println(gpsData);
      }
    }
  }

  // Check for motor commands from ESP32
  if (ESP_SERIAL.available() > 0) {
    String command = ESP_SERIAL.readStringUntil('\n');
    command.trim();
    int commaIndex = command.indexOf(',');
    if (commaIndex > 0) {
      int WL = command.substring(0, commaIndex).toInt();
      int WR = command.substring(commaIndex + 1).toInt();
      Serial.print("Received Command: ");
      Serial.print(WL); Serial.print(", "); Serial.println(WR);
      controlMotors(WL, WR);
    }
  }
}

// Motor control functions (unchanged)
void controlMotors(int WL, int WR) {
  // Left motor (Motor A)
  digitalWrite(motorPin1, WL > 0 ? HIGH : LOW);
  digitalWrite(motorPin2, WL < 0 ? HIGH : LOW);
  analogWrite(ENA, abs(WL));

  // Right motor (Motor B)
  digitalWrite(motorPin3, WR > 0 ? HIGH : LOW);
  digitalWrite(motorPin4, WR < 0 ? HIGH : LOW);
  analogWrite(ENB, abs(WR));
}

void stopMotors() {
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  digitalWrite(motorPin3, LOW);
  digitalWrite(motorPin4, LOW);
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
}
