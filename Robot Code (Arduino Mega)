#include <TinyGPS++.h>

TinyGPSPlus gps;
#define GPS_SERIAL Serial1
#define BT_SERIAL Serial3

const int ENA = 12;
const int ENB = 13;
const int motorPin1 = 8;
const int motorPin2 = 9;
const int motorPin3 = 11;
const int motorPin4 = 10;

void setup() {
  Serial.begin(115200); // For debugging
  GPS_SERIAL.begin(9600); // GPS module baud rate
  BT_SERIAL.begin(9600); // Bluetooth module baud rate
  
  // Set motor control pins as outputs
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(motorPin3, OUTPUT);
  pinMode(motorPin4, OUTPUT);
  
  // Stop motors initially
  digitalWrite(ENA, LOW);
  digitalWrite(ENB, LOW);
}

void loop() {
  // Read GPS data
  while (GPS_SERIAL.available() > 0) {
    if (gps.encode(GPS_SERIAL.read())) {
      if (gps.location.isValid()) {
        // Send GPS data to MATLAB via Bluetooth
        BT_SERIAL.print(gps.location.lat(), 6);
        BT_SERIAL.print(",");
        BT_SERIAL.print(gps.location.lng(), 6);
        BT_SERIAL.println();
      }
    }
  }
  
  // Check for incoming motor commands from MATLAB
  if (BT_SERIAL.available() > 0) {
    String command = BT_SERIAL.readStringUntil('\n');
    command.trim();
    
    // Parse the command (expecting "leftSpeed,rightSpeed")
    int commaIndex = command.indexOf(',');
    if (commaIndex > 0) {
      int leftSpeed = command.substring(0, commaIndex).toInt();
      int rightSpeed = command.substring(commaIndex + 1).toInt();
      
      // Apply motor commands
      setMotorSpeed(leftSpeed, rightSpeed);
    }
  }
}

void setMotorSpeed(int leftSpeed, int rightSpeed) {
  // Constrain speeds to 0-255
  leftSpeed = constrain(leftSpeed, 0, 255);
  rightSpeed = constrain(rightSpeed, 0, 255);
  
  // Left motor control
  if (leftSpeed > 0) {
    digitalWrite(motorPin1, HIGH);
    digitalWrite(motorPin2, LOW);
  } else if (leftSpeed < 0) {
    digitalWrite(motorPin1, LOW);
    digitalWrite(motorPin2, HIGH);
    leftSpeed = -leftSpeed;
  } else {
    digitalWrite(motorPin1, LOW);
    digitalWrite(motorPin2, LOW);
  }
  
  // Right motor control
  if (rightSpeed > 0) {
    digitalWrite(motorPin3, HIGH);
    digitalWrite(motorPin4, LOW);
  } else if (rightSpeed < 0) {
    digitalWrite(motorPin3, LOW);
    digitalWrite(motorPin4, HIGH);
    rightSpeed = -rightSpeed;
  } else {
    digitalWrite(motorPin3, LOW);
    digitalWrite(motorPin4, LOW);
  }
  
  // Set PWM speeds
  analogWrite(ENA, leftSpeed);
  analogWrite(ENB, rightSpeed);
}
